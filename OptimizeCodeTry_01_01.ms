fn hasUVWUnwrapModifier obj =
(
	(classOf obj.modifiers[obj.modifiers.count] == Unwrap_UVW)
)



-- fn doesEdgeIntersect currElementVertMinMax nextElementVertMinMax = 
-- (	
-- 	local currMinX = currElementVertMinMax[1]
-- 	local currMinY = currElementVertMinMax[2]
-- 	local currMaxX = currElementVertMinMax[3]
-- 	local currMaxY = currElementVertMinMax[4]
-- 	local nextMinX = nextElementVertMinMax[1]
-- 	local nextMinY = nextElementVertMinMax[2]
-- 	local nextMaxX = nextElementVertMinMax[3]
-- 	local nextMaxY = nextElementVertMinMax[4]
	
-- 	local xOverlap = (currElementVertMinMax[3] >= nextElementVertMinMax[1]) and (currElementVertMinMax[1] <= nextElementVertMinMax[3])
-- 	local yOverlap = (currElementVertMinMax[4] >= nextElementVertMinMax[2]) and (currElementVertMinMax[2] <= nextElementVertMinMax[4])
	
-- 	local xOverlap = (currMaxX >= nextMinX) and (currMinX <= nextMaxX)
-- 	local yOverlap = (currMaxY >= nextMinY) and (currMinY <= nextMaxY)
-- 	
-- 	return (xOverlap and yOverlap)
-- )

fn doesEdgeIntersect currEdge nextEdge = 
(
	return false	
)


fn edgeElement currEdgeElement nextEdgeElement = 
(
-- 	format "\ncurrEdgeElement: %, nextEdgeElement: %" currEdgeElement nextEdgeElement

	for i = 1 to currEdgeElement.count do
	(
		for j = 1 to nextEdgeElement.count do
		(
			intersection = doesEdgeIntersect currEdgeElement[i] nextEdgeElement[j]
		)
	)
)

fn enterTotalArray currElementFaceIndex nextElementFaceIndex = 
(
	local isOverlapping = false
	
	local tempCombinedArray = elementFacesArray[currElementFaceIndex] + elementFacesArray[nextElementFaceIndex]
	
-- 	local counter = 1
-- 	
-- 	while ((not isOverlapping) and (counter <= totalOverlappedFacesArray.count)) do
-- 	(
-- 		if (tempCombinedArray * totalOverlappedFacesArray[counter]).isEmpty == false then
-- 		(
-- 			totalOverlappedFacesArray[counter] += tempCombinedArray
-- 			isOverlapping = true
-- 		)
-- 		counter += 1
-- 	)
-- 	
-- 	if not isOverlapping do
-- 	(
-- 		append totalOverlappedFacesArray tempCombinedArray
-- 	)
	
	for i = 1 to totalOverlappedFacesArray.count do
	(
		if (tempCombinedArray * totalOverlappedFacesArray[i]).isEmpty == false then
		(
			totalOverlappedFacesArray[i] += tempCombinedArray
			isOverlapping = true
			break
		)
	)
	
	if not isOverlapping do
	(
		append totalOverlappedFacesArray tempCombinedArray
	)
)

fn getElementFacesArray obj selectedFaces = 
(
-- 	format "\nSelected faces %\n" selectedFaces
	
	visitedFaces = #{}
	
	polyOp_getElementsUsingFace = polyOp.getElementsUsingFace
	
	local numfaces = polyOp.getNumFaces obj
	local faces = (for i = 1 to numfaces where (selectedFaces[i] != false) collect i) as BitArray

	for f = 1 to numFaces where faces[f] do
	(
		local elementFaces = polyOp_getElementsUsingFace obj f
		faces -= elementFaces
		append elementFacesArray elementFaces
	)
)

totalOverlappedFacesArray = #()
elementFacesArray = #()
elementEdgesArray = #()

with undo off
(
	with redraw off
	(
		max create mode
		
		selectedObj = selection as array
		
		if (selectedObj.count == 1) and (classOf selectedObj[1].baseObject == Editable_Poly)  do
		(
			mainObj = selectedObj[1]
			
			local unwrapMod =  mainObj.modifiers[mainObj.modifiers.count]
			local selectedFaces = unwrapMod.getSelectedFaces()
			
			if (hasUVWUnwrapModifier mainObj) then
			(
				obj = copy mainObj
				ChannelInfo.CopyChannel obj 3 1
				ChannelInfo.PasteChannel obj 1 1
				ResetXForm obj
				convertToMesh obj
				convertToPoly obj
				
				
				visitedFaces = #{}
				numFaces = polyOp.getNumFaces obj
				
				-- Get Element Faces in an Array
				getElementFacesArray obj selectedFaces
				format "Element faces array: %\n" elementFacesArray
				
				
				-- Get Element Edges in an Array
				polyop_getEdgesUsingFace = polyop.getEdgesUsingFace
				for singleElem in elementFacesArray do
				(
					tempEdgeArray = #()
					join tempEdgeArray (polyop_getEdgesUsingFace obj singleElem)
					append elementEdgesArray tempEdgeArray
				)
		
				format "Element edge array: %\n" elementEdgesArray
				
				
				start = timeStamp()
				
				-- Edges to Vert DataPair
				numEdges = polyop.getNumEdges obj
				polyop_getVertsUsingEdge = polyop.getVertsUsingEdge
				edgeVertPair = #()
				for i = 1 to elementEdgesArray.count do
				(
					for j = 1 to elementEdgesArray[i].count do
					(
						append edgeVertPair (DataPair (elementEdgesArray[i][j]) (polyop.getVertsUsingEdge obj elementEdgesArray[i][j]))
					)
				)
				format "EdgeVert Pair: %\n" edgeVertPair

 				
 				-- Get EdgeVert DataPair for all edges in the object
-- 				local edgeVertDataPair = (for edge = 1 to numEdges collect DataPair (edge) (polyop_getVertsUsingEdge obj edge))
-- 				format "edgeVertDict: %\n" edgeVertDataPair
				
				
				numVerts = polyop.getNumVerts obj
				polyop_getVert = polyop.getVert
					
				-- Get VertPosition DataPair
				local vertPosition = (for vert = 1 to numVerts collect polyop_getVert obj vert)
				format "vertPosition: %\n" vertPosition
				
					
				boolFlag = false
				-- Loop elementEdgesArray
				for i = 1 to elementEdgesArray.count do
				(
					for j = i + 1 to elementEdgesArray.count where i != j do
					(
						edgeElement elementEdgesArray[i] elementEdgesArray[j]
					)
				)
				
				end = timeStamp()
				format "\nProcessing took % seconds\n" ((end - start) / 1000.0)
				
				/*
				boolFlag = false
				
				polyOp_getVertsUsingFace = polyop.getVertsUsingFace
				
				elementFaceVertsArray = #()
				elementFacesArray_Count = elementFacesArray.count
								
-- 				elementVertArray[elementFacesArray_Count] = 0
				
				elementFaceVertsArray = for i = 1 to elementFacesArray_Count collect (polyOp_getVertsUsingFace obj elementFacesArray[i])
				format "\nelementFaceVertsArray: %\n" elementFaceVertsArray
				
				polyOp_getVert = polyOp.getVert
				
				start = timeStamp()
				
-- 				for i = 1 to elementFaceVertsArray.count do
-- 				(
-- 					local minPoint = [1e9, 1e9, 1e9]
-- 					local maxPoint = [-1e9, -1e9, -1e9]

-- 					for v in elementFaceVertsArray[i] do
-- 					(
-- 						local vertPos = polyOp_getVert obj v
-- 						
-- 						minPoint.x  = amin minPoint.x vertPos.x
-- 						minPoint.y = amin minPoint.y vertPos.y
-- 						maxPoint.x = amax maxPoint.x vertPos.x
-- 						maxPoint.y = amax maxPoint.y vertPos.y
-- 					)
-- 					elementVertArray[i] = #(minPoint.x, minPoint.y, maxPoint.x, maxPoint.y)
-- 				)
				

-- 				for i = 1 to elementFaceVertsArray.count do
-- 				(
-- 					local minX = 1e9
-- 					local minY = 1e9
-- 					local maxX = -1e9
-- 					local maxY = -1e9
-- 					
-- 					local vertPos = for v in elementFaceVertsArray[i] collect polyOp_getVert obj v	
-- 				)
-- 				print vertPos
-- 					
-- 				for i = 1 to elementFaceVertsArray.count do
-- 				(
-- 					local minX = 1e9
-- 					local minY = 1e9
-- 					local maxX = -1e9
-- 					local maxY = -1e9
-- 					
-- 					local verts = elementFaceVertsArray[i]
-- 					
-- 					for v in verts do
-- 					(
-- 						local vertPos = polyOp_getVert obj v
-- 						local vx = vertPos.x
-- 						local vy = vertPos.y
-- 						
-- 						if vx < minX then minX = vx
-- 						if vy < minY then minY = vy
-- 						if vx > maxX then maxX = vx							
-- 						if vy > maxY then maxY = vy
-- 					)
-- 					elementVertArray[i] = #(minX, minY, maxX, maxY)
-- 				)
				
				for i = 1 to elementFaceVertsArray.count do
				(
					local minPoint = [1e9, 1e9, 1e9]
					local maxPoint = [-1e9, -1e9, -1e9]

					for v in elementFaceVertsArray[i] do
					(
						local vertPos = polyOp_getVert obj v
						
						minPoint.x  = amin minPoint.x vertPos.x
						minPoint.y = amin minPoint.y vertPos.y
						maxPoint.x = amax maxPoint.x vertPos.x
						maxPoint.y = amax maxPoint.y vertPos.y
					)
					append elementVertArray #(minPoint.x, minPoint.y, maxPoint.x, maxPoint.y)
				)
				
-- 				
				format "\nelementVertArray: %" elementVertArray
				end = timeStamp()
				
				
				for i = 1 to elementVertArray.count do
				(
					for j = i + 1 to elementVertArray.count where i != j do
					(
						
						boolFlag = doesEdgeIntersect elementVertArray[i] elementVertArray[j]
						
						if boolFlag do
						(
							enterTotalArray i j
						)
					)
				)
				
				format "\nTotal overlapped array: %" totalOverlappedFacesArray
			
				delete obj
			
				unwrapMod.setTVSubObjectMode 3
				unwrapMod.selectFaces #{}
				
				for i = 1 to totalOverlappedFacesArray.count do
				(
					local currFaceSelection = totalOverlappedFacesArray[i]
					unwrapMod.selectFaces currFaceSelection
					unwrapMod.GroupCreateBySelection()
					unwrapMod.selectFaces #{}
				)
				
				
				format "\nProcessing took % seconds\n" ((end - start) / 1000.0)
				*/
			)
		)
	)
)
max modify mode